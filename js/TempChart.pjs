/** **************************************************************************
 *  Copyright (C) 2010 Alexander Wunschik, IT-Solutions <dev@wunschik.it>
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

class TempGauge {

  int width;
  int height;

  boolean error = false;

  int x = 0;
  int y = 0;
  int diameter = 0;
  int radius = 0;

  int INDICATOR_ARROW = 1;
  int INDICATOR_NEEDLE = 2;

  int actualValueIndicator = INDICATOR_ARROW;
  int minMaxIndicator = INDICATOR_ARROW;
   
  float minValue = -30.0;
  float maxValue = 45.0;
  float valueSpan = maxValue-minValue; 
  
  float gaugeStartMed = map( 18.0, minValue, maxValue, 0.0, 100.0);
  float gaugeStartMax = map( 25.0, minValue, maxValue, 0.0, 100.0);
  
  float actualValue = 0.0;
  float actualMinValue = maxValue;
  float actualMaxValue = minValue;
  float targetValue = actualValue;

  float ANIMATE_SLOW = 0.2;
  float ANIMATE_NORM = 0.25;
  float ANIMATE_FAST = 0.3;

  float animationSpeed = ANIMATE_NORM;

  //PShape bg;

  boolean showGradient = true;
  boolean showAnimation = true;
  boolean showIndicator = false;
  boolean showValueText = true;
  boolean showMinIndicator = false;
  boolean showMaxIndicator = false;
  boolean showMinMaxIndicator = true;

  color backgroundColor = color(255, 255, 255);

  color scalaColor1 = color(80, 80, 80);
  color scalaColor2 = color(180, 180, 180);

  color gaugeColorMin = color(0, 0, 255, 255);
  color gaugeColorMed = color(0, 255, 0, 255);
  color gaugeColorMax = color(255, 0, 0, 255);

  color indicatorColorMin = color(200, 0, 0, 150);
  color indicatorColorMax = color(0, 200, 0, 150);

  TempGauge(int width, int height) {
    this.width = width;
    this.height = height;

    x = int(width * 0.5);
    y = int(height * 0.95);

    diameter = int(width*0.75);
    radius = int(diameter/2); 

    //bg = loadShape("GaugeBackground.svg");
    
    frameRate(10);
    noLoop();
  }

  void draw() {
    background(backgroundColor);
    smooth();

    //error handling
    if ((width < 200) | (height < 100)) {
      println("the resolution must be at least 200x100");
      error = true;
    }
    if ( height*2 < width ) {
      println("with a width of "+width+" the hight must be at least "+ceil(width/2)+" (2:1)");
      error = true;
    } 
    if (error) {
      stroke(0);
      fill(255, 0, 0);
      rect(0, 0, width, height);
      stroke(50);
      fill(50);
      textSize(width*0.2);
      textAlign(CENTER);
      text("error", width/2, height/2);
      noLoop();
      return;
    }

    //shape(bg, 0, 0, width, height);
 
    stroke(scalaColor1);
    fill(scalaColor1);
    textSize(width*0.014);
    textAlign(LEFT);
    text("(c) Copyright 2010, Wunschik IT-Solutions", width*0.70, height*0.05); 
 
 
    int stepps = round(valueSpan/15);
      
     
    
    //scala
    stroke(scalaColor1);
    for (float n=minValue; n<=maxValue; n+=stepps) {
      float arcValue = map(n, minValue, maxValue, PI, TWO_PI);  
      int xValue = x + int(cos(arcValue)*(radius*1.07));
      int yValue = y + int(sin(arcValue)*(radius*1.07));     
      line(x, y, xValue, yValue);
    }
    stroke(scalaColor1);
    for (float n=minValue+stepps/5; n<=maxValue; n+=stepps/5) {
      float arcValue = map(n, minValue, maxValue, PI, TWO_PI);  
      int xValue = x + int(cos(arcValue)*(radius*1.04));
      int yValue = y + int(sin(arcValue)*(radius*1.04));     
      line(x, y, xValue, yValue);
    }

    //scala text
    stroke(scalaColor1);
    fill(scalaColor1);
    textSize(width*0.024);
    textAlign(CENTER);
    text(ceil(minValue)+"°C", x + int(cos(PI)*(radius*1.17)), y + int(sin(PI)*(radius*1.17)));    
    for (float n=minValue+stepps; n<=maxValue-stepps; n+=stepps) {
      float arcValue = map(n, minValue, maxValue, PI, TWO_PI);  
      int xValue = x + int(cos(arcValue)*(radius*1.13));
      int yValue = y + int(sin(arcValue)*(radius*1.13));     
      text(ceil(n)+"°C", xValue, yValue);
    }
    text(ceil(maxValue)+"°C", x + int(cos(TWO_PI)*(radius*1.16)), y + int(sin(TWO_PI)*(radius*1.16)));

    //gauge background
    noStroke();
    stroke(scalaColor2);

    if (showGradient) {
      for (float n=0.0+1.0; n<gaugeStartMed; n+=(100.0-0.0)/200) {
        int gradientR = int(map(n, 0.0, gaugeStartMed, red(gaugeColorMin), red(gaugeColorMed))); 
        int gradientG = int(map(n, 0.0, gaugeStartMed, green(gaugeColorMin), green(gaugeColorMed))); 
        int gradientB = int(map(n, 0.0, gaugeStartMed, blue(gaugeColorMin), blue(gaugeColorMed))); 		  
        fill(gradientR, gradientG, gradientB);
        arc(x, y, diameter, diameter, PI+PI*(n-1)/100.0, PI+PI*n/100.0);
      }
      
      fill(gaugeColorMed);
      arc(x, y, diameter, diameter, PI+PI*((gaugeStartMed/100.0)-0.01) , PI+PI*((gaugeStartMax/100.0)+0.005) );
      
      for (float n=gaugeStartMax; n<100.0+0.5; n+=100.0/200) {
        int gradientR = int(map(n, gaugeStartMax, 101.0, red(gaugeColorMed), red(gaugeColorMax))); 
        int gradientG = int(map(n, gaugeStartMax, 101.0, green(gaugeColorMed), green(gaugeColorMax))); 
        int gradientB = int(map(n, gaugeStartMax, 101.0, blue(gaugeColorMed), blue(gaugeColorMax))); 
        fill(gradientR, gradientG, gradientB);
        arc(x, y, diameter, diameter, PI+PI*(n-1)/100.0, PI+PI*n/100.0);
      }
    } else {
      fill(gaugeColorMin);
      arc(x, y, diameter, diameter, PI, PI+PI*gaugeStartMed/100+0.05);
      fill(gaugeColorMed);
      arc(x, y, diameter, diameter, PI+PI*gaugeStartMed/100-0.005, PI+PI*gaugeStartMax/100+0.01);
      fill(gaugeColorMax);
      arc(x, y, diameter, diameter, PI+PI*gaugeStartMax/100-0.005, TWO_PI);
    }

    if (showMinMaxIndicator) {    
      //not uses area 
      fill(backgroundColor, 200);
      stroke(backgroundColor, 200);
      arc(x, y, diameter, diameter, PI-0.02, PI+PI*map(actualMinValue, minValue, maxValue, 0.0, 1.0));
      arc(x, y, diameter, diameter, PI+PI*map(actualMaxValue, minValue, maxValue, 0.0, 1.0), TWO_PI+0.02);
    /*
      fill(150,150,150, 80);
      stroke(150,150,150, 80);
      arc(x, y, diameter, diameter, PI+PI*actualMinValue/100, PI+PI*actualMaxValue/100);
    */
    }
    
    fill(backgroundColor);
    stroke(scalaColor2);
    arc(x, y, diameter*0.65, diameter*0.65, PI-0.01, TWO_PI+0.01);

    //actualValue text
    if (showValueText) {   
      fill(scalaColor2);
      stroke(scalaColor1);		  		
      rect(x-width*0.07,height*0.7-height*0.05, width*0.14, height*0.1);
      
      stroke(scalaColor1);		
      fill(scalaColor1);
      textSize(width*0.026);
      textAlign(CENTER);
      if (actualValue == 0.0)
        text("0.0°C", x, height*0.72);
      else
        text(floor(actualValue)+"."+floor(abs(actualValue%floor(abs(actualValue)))*10)+"°C", x, height*0.72);
    }

    //min actualValue needle
    if (showMinIndicator) {
      if (minMaxIndicator == INDICATOR_ARROW) {
        stroke(indicatorColorMin);
        fill(indicatorColorMin);
        strokeWeight(1); 
        float arcValue = map(actualMinValue, minValue, maxValue, PI, TWO_PI);  
        int xStartValue = x + int(cos(arcValue)*radius*0.648);
        int yStartValue = y + int(sin(arcValue)*radius*0.648); 
        int xEndValue = x + int(cos(arcValue)*radius*0.7);
        int yEndValue = y + int(sin(arcValue)*radius*0.7);     
        triangle(
          xStartValue-sin(arcValue-PI)*diameter*0.018, 
          yStartValue+cos(arcValue-PI)*diameter*0.018, 
          xStartValue+sin(arcValue-PI)*diameter*0.018, 
          yStartValue-cos(arcValue-PI)*diameter*0.018,
          xEndValue, yEndValue);
      } else {
        stroke(indicatorColorMin);
        strokeWeight(1); 
        float arcValue = map(actualMinValue, minValue, maxValue, PI, TWO_PI);  
        int xStartValue = x + int(cos(arcValue)*radius*0.648);
        int yStartValue = y + int(sin(arcValue)*radius*0.648); 
        int xEndValue = x + int(cos(arcValue)*radius*1);
        int yEndValue = y + int(sin(arcValue)*radius*1);     
        line(xStartValue, yStartValue, xEndValue, yEndValue);
      }
      
      stroke(indicatorColorMin);	
      fill(indicatorColorMin);
      textSize(width*0.016);
      textAlign(CENTER); 
      float arcValue = map(actualMinValue, minValue, maxValue, PI, TWO_PI);   
      int xValue = x + int(cos(arcValue)*(radius*0.55));
      int yValue = y + int(sin(arcValue)*(radius*0.55));       
      if (actualValue == 0.0) {
        text("0.0°C", x, height*0.72);
      } else {
        text(floor(actualMinValue)+"."+floor(abs(actualMinValue%floor(abs(actualMinValue)))*10)+"°C", xValue, yValue);
      }
    }

    //max actualValue needle
    if (showMaxIndicator) {
      if (minMaxIndicator == INDICATOR_ARROW) {
        stroke(indicatorColorMax);
        fill(indicatorColorMax);
        strokeWeight(1); 
        float arcValue = map(actualMaxValue, minValue, maxValue, PI, TWO_PI);  
        int xStartValue = x + int(cos(arcValue)*radius*0.648);
        int yStartValue = y + int(sin(arcValue)*radius*0.648); 
        int xEndValue = x + int(cos(arcValue)*radius*0.7);
        int yEndValue = y + int(sin(arcValue)*radius*0.7);     
        triangle(
          xStartValue-sin(arcValue-PI)*diameter*0.018, 
          yStartValue+cos(arcValue-PI)*diameter*0.018, 
          xStartValue+sin(arcValue-PI)*diameter*0.018, 
          yStartValue-cos(arcValue-PI)*diameter*0.018,
        xEndValue, yEndValue);
      } else {
        stroke(indicatorColorMax);
        strokeWeight(1); 
        float arcValue = map(actualMaxValue, minValue, maxValue, PI, TWO_PI);  
        int xStartValue = x + int(cos(arcValue)*radius*0.648);
        int yStartValue = y + int(sin(arcValue)*radius*0.648); 
        int xEndValue = x + int(cos(arcValue)*radius*1);
        int yEndValue = y + int(sin(arcValue)*radius*1);     
        line(xStartValue, yStartValue, xEndValue, yEndValue);
      }
      
      stroke(indicatorColorMax);	
      fill(indicatorColorMax);
      textSize(width*0.016);
      textAlign(CENTER); 
      float arcValue = map(actualMaxValue, minValue, maxValue, PI, TWO_PI);  
      int xValue = x + int(cos(arcValue)*(radius*0.55));
      int yValue = y + int(sin(arcValue)*(radius*0.55)); 
      if (actualValue == 0.0) {
        text("0.0°C", x, height*0.72);
      } else {
        text(floor(actualMaxValue)+"."+floor(abs(actualMaxValue%floor(abs(actualMaxValue)))*10)+"°C", xValue, yValue);
      }
    }

    //needle  
    float arcValue = map(actualValue, minValue, maxValue, PI, TWO_PI);  
    int xStartValue = x;	
    int yStartValue = y;
    if (!showIndicator) { 
      xStartValue = x + int(cos(arcValue)*radius*0.648);
      yStartValue = y + int(sin(arcValue)*radius*0.648);
    } 
    int xEndValue = x + int(cos(arcValue)*(radius*0.985));
    int yEndValue = y + int(sin(arcValue)*(radius*0.985));

    if (actualValueIndicator == INDICATOR_ARROW) {
      //arrow
      noStroke();
      fill(scalaColor2, 180);
      triangle(
        xStartValue-sin(arcValue-PI)*diameter*0.018, 
        yStartValue+cos(arcValue-PI)*diameter*0.018, 
        xStartValue, yStartValue, 
        xEndValue, yEndValue);
      noStroke();
      fill(scalaColor1, 180);
      triangle(
        xStartValue+sin(arcValue-PI)*diameter*0.018, 
        yStartValue-cos(arcValue-PI)*diameter*0.018, 
        xStartValue, yStartValue,
        xEndValue, yEndValue);
    } else {
      //needle
      if (showIndicator) {
        stroke(20, 180);
      } else {		
        stroke(50, 180);
      }
      strokeWeight(4);
      line(xStartValue, yStartValue, xEndValue, yEndValue);
    }

    //needle pin
    if (showIndicator) { 
      noStroke();
      fill(scalaColor1);
      ellipse(x, y, diameter*0.05,  diameter*0.05);
      fill(scalaColor2);
      ellipse(x, y, diameter*0.04,  diameter*0.04);
      fill(scalaColor1);
      ellipse(x, y, diameter*0.01,  diameter*0.01);
    } else {
      fill(backgroundColor);
      stroke(backgroundColor);
      rect(x-diameter/2, y, diameter, height*0.03);
    }

    //neddle animation
    if (actualValue < targetValue) {
      actualValue += abs(actualValue-targetValue)*animationSpeed;
    } else if (actualValue > targetValue) {
      actualValue -= abs(actualValue-targetValue)*animationSpeed;
    } else if (actualValue == targetValue) {
      noLoop();
    }
    
    //stop needle animation
    if (( abs(actualValue-targetValue) < animationSpeed ) | (!showAnimation)) {
      actualValue = targetValue;
    }

    //set max actualValue
    if (actualMaxValue < actualValue) {
      actualMaxValue = actualValue;
    }

    //set min actualValue
    if (actualMinValue > actualValue) {
      actualMinValue = actualValue;
    }

  }
  
  /** ********************************************************************************
   * getter and setter
   ***********************************************************************************

  /**
   * @param  newValue
   */
  void setValue(float newValue) {
    if (newValue < minValue) {
      newValue = minValue;
    } else if (newValue > maxValue) {
      newValue = maxValue;
    }
    
    targetValue = newValue;

    loop();
  }

  /**
   * @param  newValue
   */
  void resetActualMinValue() {
    actualMinValue = actualValue;
  }
  
  /**
   * @param  newValue
   */
  void resetActualMaxValue() {
    actualMaxValue = actualValue;
  }
  
  /**
   * @param  value
   */
  void setShowGradient(boolean value) { 
    showGradient = value;
  }

  /**
   * @param  value
   */
  void setShowAnimation(boolean value) { 
    showAnimation = value;
  }
  
  /**
   * @param  value
   */	
  void setShowIndicator(boolean value) { 
    showIndicator = value;
  }
  
  /**
   * @param  value
   */	
  void setShowValueText(boolean value) { 
    showValueText = value;
  }
  
  /**
   * @param  value
   */	
  void setShowMinIndicator(boolean value) { 
    showMinIndicator = value;
  }
  
  /**
   * @param  value
   */	
  void setShowMaxIndicator(boolean value) { 
    showMaxIndicator = value;
  }
  
  /**
   * @param  newValue
   */
  void setShowMinMaxIndicator(boolean value) {
    showMinMaxIndicator = value;
  }
  
  /**
   * @param  value
   */	
  void setBackgroundColor(color col) {
    backgroundColor = col;
  }

  /**
   * @param  value
   */	
  void setScalaColor1(color col) {
    scalaColor1 = col;
  }
  
  /**
   * @param  value
   */	
  void setScalaColor2(color col) {
    scalaColor2 = col;
  }

  /**
   * @param  value
   */	
  void setGaugeColorMin(color col) {
    gaugeColorMin = col;
  }

  /**
   * @param  value
   */	
  void setGaugeColorMed(color col) {
    gaugeColorMed = col;
  }

  /**
   * @param  value
   */	
  void setGaugeColorMax(color col) {
    gaugeColorMax = col;
  }

  /**
   * @param  value
   */	
  void setIndicatorColorMin(color col) {
    indicatorColorMax = col;
  }
  
  /**
   * @param  value
   */	
  void setIndicatorColorMax(color col) {
    indicatorColorMax = col;
  }
}

TempGauge gauge;

float value = 0.0;

void setup() {
  size(600, 300);
  
  //initialize gauge chart
  gauge = new TempGauge(width, height);
  
  gauge.setShowGradient(true);
  gauge.setShowAnimation(true);
  gauge.setShowIndicator(false);
  gauge.setShowValueText(true);	
  gauge.setShowMinIndicator(false);
  gauge.setShowMaxIndicator(false);
  gauge.setShowMinMaxIndicator(false);
  gauge.setBackgroundColor(color(0));
  gauge.setScalaColor1(color(180));
  gauge.setScalaColor2(color(80));
  gauge.setIndicatorColorMin(color(200,0,0));	
  gauge.setIndicatorColorMax(color(0,200,0));
  
  //get value
  loadData();

  gauge.setValue(value); 
}

void draw() {
  gauge.draw(); 
  
  //gauge.setValue(map(mouseX, 0, width, 0.0, 100.0));
}

void mousePressed() {
  if (mouseButton == RIGHT) {
    gauge.resetActualMinValue();
    gauge.resetActualMaxValue();
  } else {
    gauge.setValue(random(-20, 40));
  }
}

void loadData() {
  String[] lines = loadStrings("temp.json");
  for (int l=0; l<lines.length; l++) {
    String actualLine = lines[l]; 
    
    String[] s = split(actualLine, ':');
       
    if (s[0].equals("value")) {
      value = float(trim(s[1]));
      return;
    }
  }
}
